.fp 5 CW
.TH LIBASO 3
.SH NAME
\fBASO\fP \- Atomic Scalar Operations
.SH SYNOPSIS
.de Tp
.fl
.ne 2
.TP
..
.de Ss
.fl
.ne 2
.SS "\\$1"
..
.de Cs
.nf
.ft 5
..
.de Ce
.ft 1
.fi
..
.ta 1.0i 2.0i 3.0i 4.0i 5.0i
.Cs
#include <aso.h>
.Ce
.Ss "OPERATIONS"
.Cs
uint8_t		asocas8(uint8_t volatile*, int, int);
uint8_t		asoget8(uint8_t volatile*);
uint8_t		asoadd8(uint8_t volatile*, uint8_t);
uint8_t		asosub8(uint8_t volatile*, uint8_t);
uint8_t		asoinc8(uint8_t volatile*);
uint8_t		asodec8(uint8_t volatile*);

uint16_t	asocas16(uint16_t volatile*, uint16_t, uint16_t);
uint16_t	asoget16(uint16_t volatile*);
uint16_t	asoadd16(uint16_t volatile*, uint16_t);
uint16_t	asosub16(uint16_t volatile*, uint16_t);
uint16_t	asoinc16(uint16_t volatile*);
uint16_t	asodec16(uint16_t volatile*);

uint32_t	asocas32(uint32_t volatile*, uint32_t, uint32_t);
uint32_t	asoget32(uint32_t volatile*);
uint32_t	asoadd32(uint32_t volatile*, uint32_t);
uint32_t	asosub32(uint32_t volatile*, uint32_t);
uint32_t	asoinc32(uint32_t volatile*);
uint32_t	asodec32(uint32_t volatile*);

uint64_t	asocas64(uint64_t volatile*, uint64_t, uint64_t);
uint64_t	asoget64(uint64_t volatile*);
uint64_t	asoadd64(uint64_t volatile*, uint64_t);
uint64_t	asosub64(uint64_t volatile*, uint64_t);
uint64_t	asoinc64(uint64_t volatile*);
uint64_t	asodec64(uint64_t volatile*);

unsigned char	asocaschar(unsigned char volatile*, int, int);
unsigned char	asogetchar(unsigned char volatile*);
unsigned char	asoaddchar(unsigned char volatile*, int);
unsigned char	asosubchar(unsigned char volatile*, int);
unsigned char	asoincchar(unsigned char volatile*);
unsigned char	asodecchar(unsigned char volatile*);

unsigned short	asocasshort(unsigned short volatile*, unsigned short, unsigned short);
unsigned short	asogetshort(unsigned short volatile*);
unsigned short	asoaddshort(unsigned short volatile*, int);
unsigned short	asosubshort(unsigned short volatile*, int);
unsigned short	asoincshort(unsigned short volatile*);
unsigned short	asodecshort(unsigned short volatile*);

unsigned int	asocasint(unsigned int volatile*, unsigned int, unsigned int);
unsigned int	asogetint(unsigned int volatile*);
unsigned int	asoaddint(unsigned int volatile*, unsigned int);
unsigned int	asosubint(unsigned int volatile*, unsigned int);
unsigned int	asoincint(unsigned int volatile*);
unsigned int	asodecint(unsigned int volatile*);

unsigned long	asocaslong(unsigned long volatile*, unsigned long, unsigned long);
unsigned long	asogetlong(unsigned long volatile*);
unsigned long	asoaddlong(unsigned long volatile*, unsigned long);
unsigned long	asosublong(unsigned long volatile*, unsigned long);
unsigned long	asoinclong(unsigned long volatile*);
unsigned long	asodeclong(unsigned long volatile*);

size_t		asocassize(size_t volatile*, size_t, size_t);
size_t		asogetsize(size_t volatile*);
size_t		asoaddsize(size_t volatile*, size_t);
size_t		asosubsize(size_t volatile*, size_t);
size_t		asoincsize(size_t volatile*);
size_t		asodecsize(size_t volatile*);

void*		asocasptr(void volatile*, void*, void*);
void*		asogetptr(void volatile*);

unsigned int	asoactivecpu(void);
int		asolock(unsigned int volatile*, unsigned int, int);
int		asorelax(long);
unsigned int	asothreadid(void);
int		asoyield(void);

void		asospindecl(void);
void		asospininit(void);
void		asospinnext(void);
void		asospinrest(void);

#define		_ASO_INTRINSIC	[012]
.Ce
.SH DESCRIPTION
.PP
\fIASO\fP provides functions to perform atomic scalar operations.
The functions on the type \f5uint32_t\fP will be fully described below.
Other functions work similarly on their respective types.
64 bit operations are provided if the compiler supports 64 bit integers and/or pointers.

On most modern architectures (with modern compilers) the \fIASO\fP functions are macros
that reference the respective intrinsic operations directly.
Operations lacking intrinsics are implemented by composing other intrinsics.
At minimum a \fBcas\fP (compare and swap) atomic intrinsic must be avalable for
\fIASO\fP to ensure atomic operations.
The value of the macro \f5_ASO_INTRINSIC\fP describes the native environment:
.Tp
0
No atomic intrinsic operations available.
\fIASO\fP is emulated for a single process/thread and private memory only.
.Tp
1
Some atomic intrinsic operations are available.
\fIASO\fP works for multi process/thread and shared memory.
.Tp
2
Atomic intrinsics are implemented using atomic assember machine instructions.
\fIASO\fP works for multi process/thread and shared memory.
.PP
.Ss "TYPES"
.PP
\f5uint8_t, uint16_t, uint32_t, uint64_t\fP

These are \fIunsigned integer\fP types of different sizes in bits.
For example, \f5uint32_t\fP represents the type of unsigned integer with 32 bits or 4 bytes.
.PP
.Ss "OPERATIONS"
.PP
.Ss "  uint32_t asoget32(uint32_t* from);"
This function returns the value \f5*from\fP.
.PP
.Ss "  uint32_t asoadd32(uint32_t* dest, uint32_t num);"
.Ss "  uint32_t asosub32(uint32_t* dest, uint32_t num);"
These functions add \f5num\fP to \f5*dest\fP and subtract \f5num\fP from \f5*dest\fP in an atomic step.
The return value is the old value in \f5*dest\fP.
.PP
.Ss "  uint32_t asoinc32(uint32_t* dest);"
.Ss "  uint32_t asodec32(uint32_t* dest);"
These functions increment \f5*dest\fP by 1 and decrement \f5*dest\fP by 1 in an atomic step.
The return value is the old value in \f5*dest\fP.

Consider an example where two concurrent threads/processes call \f5asoadd8()\fP
on the same \f5dest\fP with values, say \fIv1\fP and \fIv2\fP.
The eventual value in \f5dest\fP
will be as if \f5*dest += v1+v2\fP was performed in a single-threaded execution.

That should be constrasted with a situation where, instead of \f5asoadd8()\fP,
only normal arithmetics were used. Then, the end result could be any of
\f5*dest += v1\fP, \f5*dest += v2\fP or \f5*dest += v1+v2\fP, depending
on states of the hardware cache and the process scheduling.
.PP
.Ss "  uint32_t asocas32(uint32_t* dest, uint32_t tstval, uint32_t newval);"
This function provides the atomic \fIcompare-and-swap\fP operation.
If the current content of \f5dest\fP is equal to \f5tstval\fP then it will be set to \f5newval\fP.
If multiple threads/processes are performing the same operations only one will succeed with a
return value of \f5tstval\fP.
The return value is the old value in \f5*dest\fP.
.PP
.Ss "  void asorelax(long nsec);"
This function causes the calling process or thread to briefly pause operations
for a number of nanoseconds given in \f5nsec\fP.
It is useful to implement tight loops that occasionally yield control.
.PP
.Ss "  int asolock(unsigned int* lock, unsigned int key, int type);"
This function uses \f5key\fP, a non-zero unsigned integer, to lock or unlock the \f5lock\fP.
It returns 0 or 1 on success and -1 on failure.

The argument \f5type\fP can be one of the below values:
.Tp
\f5ASO_TRYLOCK\fP:
This call makes a single attempt to use the given \f5key\fP to acquire a lock.
If successful, it returns 1; else it returns -1.
.Tp
\f5ASO_LOCK\fP:
This call uses a spin loop to acquire a lock with the given \f5key\fP.
On success, it returns 1. There is no failure mode with this call.
.Tp
\f5ASO_UNLOCK\fP:
This call unlocks the lock if it was locked with \f5key\fP. It returns 1 on success
and -1 on failure.
.PP
.Ss "  unsigned int  asothreadid(void);"
This function returns an identification number probabilistically unique to the thread invoking it.
The identification number is guaranteed to be non-zero and without the high bit on.

It is assumed that the keyword \f5__thread\fP is supported by the C compiler in use.
If not, probabilistic uniqueness will not be guaranteed.
.PP
.Ss "  unsigned int  asoactivecpu(void);"
This function returns an estimation of the number of active CPU cores.
.PP
.Ss "  #define asospindecl()"
.Ss "  #define asospininit()"
.Ss "  #define asospinnext()"
.Ss "  #define asospinrest()"
These macro functions can be used to construct a concurrent spin-loop to process resources.
They attempt to balance out computing resource among threads and/or processes competing
for the same resources.
\f5asospindecl()\fP declares needed variables so it should be used in a syntactic context
suitable for such declarations.
\f5asospinrest()\fP sleeps for a fraction of a second.
Below is an example of how to manage a critical section of code using a spin-lock:

.Cs
      unsigned int lock;
      asospindecl();

      for(asospininit();; asospinnext() )
          if(asocasint(&lock, 0, 1) == 0)
               break;

      ... critical section of code ...

      asocasint(&lock, 1, 0); /* release lock */
.Ce

.PP
.SH AUTHOR
Kiem-Phong Vo, Adam Edgar, and Glenn Fowler
