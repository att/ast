.fp 5 CW
.TH VMALLOC 3 "12 June 2012"
.SH NAME
Vmalloc \- Virtual memory allocation
.SH SYNOPSIS
.de Tp
.fl
.ne 2
.TP
..
.de Ss
.fl
.ne 2
.SS "\\$1"
..
.de Cs
.nf
.ft 5
..
.de Ce
.ft 1
.fi
..
.ta 1.0i 2.0i 3.0i 4.0i 5.0i
.Cs
#include <vmalloc.h>
.Ce
.Ss "VMALLOC TYPES"
.Cs
Void_t*;
Vmalloc_t;
Vmdisc_t;
Vmethod_t;
Vmstat_t;
.Ce
.Ss "STANDARD REGIONS"
.Cs
Vmalloc_t* Vmheap;
Vmalloc_t* Vmregion;
.Ce
.Ss "MEMORY DISCIPLINES"
.Cs
Vmdisc_t*  Vmdcsystem;
Vmdisc_t*  Vmdcheap;
Vmdisc_t*  vmdcderive(Vmalloc_t* vm, ssize_t round, int heap);
Vmdisc_t*  vmdcshare(char* name, int project, ssize_t size, int type);
Vmdisc_t*  vmdisc(Vmalloc_t* vm, Vmdisc_t* disc);
.Ce
.Ss "ALLOCATION METHODS"
.Cs
Vmethod_t* Vmbest;
Vmethod_t* Vmlast;
Vmethod_t* Vmpool;
Vmethod_t* Vmdebug;
.Ce
.Ss "CONTROL FUNCTIONS"
.Cs
Vmalloc_t* vmopen(Vmdisc_t* disc, Vmethod_t* meth, int flags);
int        vmclose(Vmalloc_t* vm);
int        vmset(Vmalloc_t* vm, int flags, int type);
void       vmclrlock(int all);
.Ce
.Ss "ALLOCATION FUNCTIONS"
.Cs
Void_t*    vmalloc(Vmalloc_t* vm, size_t size);
Void_t*    vmalign(Vmalloc_t* vm, size_t size, size_t align);
Void_t*    vmresize(Vmalloc_t* vm, Void_t* addr, size_t size, int type);
int        vmfree(Vmalloc_t* vm, Void_t* addr);
.Ce
.Ss "SUPPORT FUNCTIONS"
.Cs
Void_t*    vmmaddress(size_t size);
Void_t*    vmdata(Vmalloc_t* vm);
Void_t*    vmuserdata(Vmalloc_t* vm, unsigned int key, ssize_t size);
Vmalloc_t* vmregion(Void_t* addr);
int        vmsegwalk(Vmalloc_t* vm,
                     int(*walkf)(vm, Void_t* seg, size_t size, disc));
Void_t*    vmsegfind(Vmalloc_t* vm, Void_t* addr);
int        vmstat(Vmalloc_t* vm, Vmstat_t* statb);
.Ce
.Ss "TRACING ALLOCATION CALLS"
.Cs
int        vmtrace(int fd);
.Ce
.Ss "DEBUGGING MEMORY ERRORS"
.Cs
int        vmdebug(int fd);
int        vmdbcheck(Vmalloc_t* vm);
Void_t*    vmdbwatch(Void_t* addr);
.Ce
.Ss "MALLOC COMPATIBILITY"
.Cs
Void_t*    malloc(size_t size);
Void_t*    realloc(Void_t* addr, size_t size);
Void_t*    calloc(size_t n_obj, size_t s_obj);
int        cfree(Void_t* addr);
void       free(Void_t* addr);"
int        posix_memalign(Void_t** memptr, size_t align, size_t size);
Void_t*    memalign(size_t align, size_t size);
Void_t*    aligned_alloc(size_t align, size_t size);
Void_t*    valloc(size_t size);
Void_t*    pvalloc(size_t size);
Void_t*    alloca(size_t size);
.Ce
.Ss "MISCELLANIES"
.Cs
Void_t*    vmnewof(Vmalloc_t* vm, Void_t* addr, type, size_t n, size_t x);
Void_t*    vmoldof(Vmalloc_t* vm, Void_t* addr, type, size_t n, size_t x);
Void_t*    vmgetmem(Vmalloc_t* vm, Void_t* addr, size_t size);
.Ce
.SH DESCRIPTION
Vmalloc provides for general dynamic storage allocation.
Allocation functions run on \fIvirtual memory regions\fP, each
parameterized by a \fImemory discipline\fP to obtain memory to be allocated
and an \fIallocation method\fP that implements some particular allocation strategy.
The library provides standard memory disciplines to obtain heap memory from
memory from the operating system, shared and persistent memory
via \f5shmem(2)\fP or \f5mmap(2)\fP, and also memory recursively obtained
from some other region,

All available allocation methods use algorithms and data structures that are
concurrency-safe so that both multiple threads and multiple processes
can share regions safely.

For convenience and backward compatibility, most popularly known
allocation functions including the familiar Malloc interface are provided.
In this way, existing applications can largely link with Vmalloc without any modification.
Further, the provided Malloc interface is naturally thread-safe since
the allocation functions operate on a standard region that is concurrency-safe.
.PP
.Ss "VMALLOC TYPES"
.PP
.Ss "  Void_t*"
Pointers to space have type \f5Void_t*\fP
where \f5Void_t\fP is \f5#define\fPd as \f5void\fP if possible, otherwise \f5char\fP.
.PP
.Ss "  Vmalloc_t"
This is the type of a memory region. See \f5vmopen()\fP for region creation.
.PP
.Ss "  Vmdisc_t"
This is the type of a memory discipline which provides a function to get raw memory.
.PP
.Ss "  Vmethod_t"
This is the type of an allocation method that encapsulates algorithms
for allocating and freeing memory.
.PP
.Ss "  Vmstat_t"
This is the type of a structure to get statistics from a region. See \f5vmstat()\fP.
.PP
.Ss "STANDARD REGIONS"
.PP
.Ss "  Vmalloc_t* Vmheap;"
The region \f5Vmheap\fP allocates process-local memory
obtained via the memory discipline \f5Vmdcsystem\fP.
The allocation method used is \f5Vmbest\fP.
.PP
.Ss "  Vmalloc_t* Vmregion;"
Functions in the Malloc compatibility package
allocate memory via \f5Vmregion\fP which is initially the same as \f5Vmheap\fP.
Both the application itself and the Malloc package
could alter \f5Vmregion\fP to redirect the working of the Malloc functions.
See the section "MALLOC COMPATIBILITY" below for details.
.PP
.Ss "MEMORY DISCIPLINES"
The type \f5Vmdisc_t\fP defines a memory discipline structure with these members:
.Cs
    Void_t* (*memoryf)(Vmalloc_t *vm,
                 Void_t* mem, size_t csz, size_t nsz, Vmdisc_t *disc);
    int     (*exceptf)(Vmalloc_t *vm,
                 int type, Void_t* arg, Vmdisc_t *disc);
    size_t  round;
.Ce
.PP
\f5Vmdisc_t.memoryf\fP points to a function to obtain or release raw memory segments.
The arguments \f5csz\fP and \f5nsz\fP are guaranteed to be
some multiples of \f5Vmdisc_t.round\fP if it is positive.
If \f5csz\fP is \f50\fP, a new memory segment of size \f5nsz\fP is requested.
In this case, \f5memoryf\fP should return the new segment on success or \f5NULL\fP on failure.
If \f5csz\fP is positive, \f5mem\fP will point to a previously obtained memory segment.
In this case, \f5csz\fP is the current size and \f5nsz\fP is the new size desired for \f5mem\fP.
The segment \f5mem\fP must not be moved! Thus, a successful size adjustment always returns \f5mem\fP
even if \f5mem\fP was deallocated (because \f5nsz == 0\fP). It is assumed that, even on failure
(i.e., \f5memoryf\fP returns \f5NULL\fP), \f5mem\fP will remain intact.
.PP
\f5Vmdisc_t.exceptf\fP 
is a function to process certain announced allocation events.
The \f5type\fP argument defines the event while \f5arg\fP is the accompanying object, if any.
Following are the events:
.Tp
\f5VM_OPEN\fP
This event announces a region opening.
The argument \f5arg\fP points to an object of type \f5Void_t*\fP
initialized to NULL. The return value of \f5exceptf\fP
is significant as follows:

On a negative return value, \f5vmopen()\fP will terminate with failure.

On a zero return value, \f5exceptf\fP may additionally set \f5*((Void_t**)arg)\fP
to some non-NULL value and cause \f5vmopen()\fP
to allocate the region handle itself via memory obtained by \f5memoryf\fP.
Otherwise, the region handle will be allocated from the \f5Vmheap\fP region.

A positive return value indicates that the region is being reconstructed
from some existing states. It is assumed that \f5exceptf\fP has set
\f5*((Void_t**)arg)\fP to point to such states.
Here, "states" means the memory pointed to by the field \f5Vmalloc_t.data\fP
of some other region (perhaps in shared or persistent memory).
See also \f5VM_CLOSE\fP below.
.Tp
\f5VM_ENDOPEN\fP
This event announces the end of region opening.
The return value of \f5exceptf\fP will be ignored.
.Tp
\f5VM_CLOSE\fP
This event announces a region closing.
The return value of \f5exceptf\fP is significant as follows:

On a negative return value, \f5vmclose\fP immediately returns with failure.

On a zero return value, \f5vmclose\fP proceeds normally by calling \f5memoryf\fP to free
all allocated memory segments and also freeing the region itself.

On a positive return value, \f5vmclose\fP will only free the region if it was allocated
from \f5Vmheap\fP as discussed in the description of \f5VM_OPEN\fP above.
Associated memory segments will not be freed.
That is, the field \f5Vmalloc_t.data\fP of the region handle remains intact.
.Tp
\f5VM_ENDCLOSE\fP
This event announces the end of region closing.
The return value of \f5exceptf\fP will be ignored.
.Tp
\f5VM_NOMEM\fP
This event announces the failure of an attempt to extend the region by
\f5(size_t)arg\fP bytes. \f5exceptf\fP can cause the memory extension attempt
to be repeated with a positive return value.
.Tp
\f5VM_DISC\fP
This event announces a discipline change.
\f5exceptf\fP can stop this with a negative return value.
.PP
.Ss "  Vmdisc_t* Vmdcsystem;"
This memory discipline obtains raw memory via standard methods
provided by the local operating system. For example, on Unix/Linux systems,
either \f5sbrk(2)\fP or \f5mmap(2)\fP or both may be used.
On Windows system, the \f5VirtualAlloc()\fP interface is used.
.PP
.Ss "  Vmdisc_t* Vmdcheap;"
This memory discipline obtains raw memory by recursively allocating from \f5Vmheap\fP.
Thus, a region constructed with \f5Vmdcheap\fP
is a derived memory region (see \f5vmdcderive()\fP) based on
the heap region.
.PP
.Ss "  Vmdisc_t* vmdcderive(Vmalloc_t* vm, ssize_t round, int heap);"
This function constructs a memory discipline that obtains raw memory for a
new region by allocating memory from the region \f5vm\fP.
A discipline constructed this way is called a \fIderived discipline\fP while
a region based on it is said to be a \fIderived region\fP based on \f5vm\fP.
\f5vmdcderive()\fP returns
the new discipline on success and \f5NULL\fP on failure.

The \f5round\fP argument defines the \f5round\fP member of the new discipline.

The \f5heap\fP argument, if non-zero, indicates that space for the derived discipline
will be allocated from the region \f5Vmheap\fP; else, from \f5vm\fP itself.
Note that this space is deallocated on the event \f5VM_ENDCLOSE\fP.
Thus, each derived region should use a separate derived discipline.

Derived memory regions are useful to allocate data structures
that could benefit from localizing memory, e.g., to improve cache performance.
Further, freeing such data structures can be done efficiently
by simply closing the respective regions instead of
freeing each allocated block separately.
.PP
.Ss "  Vmdisc_t* vmdcshare(char* name, int project, ssize_t size, int type);"
This function constructs a memory discipline to manage shared and/or persistent memory.
Space for the new discipline will be from \f5Vmheap\fP. The \f5exceptf\fP
function of the discipline will deallocate this space on the event \f5VM_ENDCLOSE\fP.
Thus, each discipline constructed by \f5vmdcshare()\fP must be used in a separate region.
\f5vmdcshare()\fP returns the new discipline on success or \f5NULL\fP on failure.

The arguments \f5name\fP and \f5project\fP determine which type of memory is
being managed. If \f5project\fP is non-negative, the pair \f5(name,project)\fP
defines a probabilistically unique id used to create
a shared memory segment using the \f5shmget(2)\fP family of functions.
If \f5project\fP is negative, then \f5name\fP is a file name that
will be used with the \f5mmap(2)\fP facility to obtain memory. In this case,
the memory will be both sharable and persistent, ie, stored in the file system
even after region closing or process exiting.

The size of the region will be fixed at approximately \f5size\fP bytes after rounding
per certain system requirements, e.g., alignment by page size.
The \f5type\fP argument determines the treatment of memory
and associated resources upon region closing. If \f5type > 0\fP, the memory will
be kept attached to the process. If \f5type == 0\fP, the memory will be detached
(via \f5shmdt(2)\fP or \f5munmap(2)\fP). If \f5type < 0\fP, the memory will
be detached and the associated file or shared memory segment will be removed.

Since memory is referred to by pointers, a shared and/or persistent memory
must be at the same address in all processes using it.
Thus, the first instance of such a memory must be created at a location that
the memory can be remapped to each time it is needed.
The function \f5vmmaddress()\fP is used to compute such an address that avoids
certain common hindrances to remapping.

On occasions, an application may need to store certain control information of its own in
the shared or persistent memory in some easily retrievable form.
See \f5vmuserdata()\fP for that.
.PP
.Ss "  Vmdisc_t* vmdisc(Vmalloc_t* vm, Vmdisc_t* disc);"
If \f5disc\fP is \f5NULL\fP, \f5vmdisc()\fP returns the current memory discipline in region \f5vm\fP.
Otherwise, an attempt is made to change the memory discipline of \f5vm\fP to \f5disc\fP.
The event \f5VM_DISC\fP will be announced via the \f5exceptf\fP function
of the current discipline which may disallow the change by returning -1.
\f5vmdisc()\fP returns the old discipline on success and \f5NULL\fP on failure.
.PP
.Ss "ALLOCATION METHODS"
.PP
.Ss "  Vmethod_t* Vmbest;"
The \f5Vmbest\fP method allocates memory using a best-fit strategy. This is a general purpose
allocation strategy that performs best in terms of reducing fragmentation wastage.
.PP
.Ss "  Vmethod_t* Vmlast;"
The \f5Vmlast\fP method allows only the latest allocated block to be freed or resized.
This allocation strategy avoids book-keeping memory 
when structures are built in pieces but removed as a whole.
.PP
.Ss "  Vmethod_t* Vmpool;"
The \f5Vmpool\fP method provides a strategy to allocate blocks of the same size.
This size is set on the first \f5vmalloc()\fP call after the region is opened.
.PP
.Ss "  Vmethod_t* Vmdebug;"
The \f5Vmdebug\fP method allows detection of
certain errors such as memory overwriting, freeing a block twice, etc.
See DEBUGGING MEMORY ERRORS for details.
.PP
.Ss "CONTROL FUNCTIONS"
.PP
.PP
.Ss "  Vmalloc_t* vmopen(Vmdisc_t* disc, Vmethod_t* meth, int flags);"
\f5vmopen()\fP creates a region with memory discipline \f5disc\fP
and memory allocation method \f5meth\fP.
The region handle will be allocated via \f5disc->memoryf\fP if \f5flags\fP
contains the bit flag \f5VM_MEMORYF\fP, or via \f5Vmheap\fP otherwise.
See DEBUGGING MEMORY ERRORS for details on the other available bit flags \f5VM_DBCHECK\fP and \f5VM_DBABORT\fP.
\f5vmopen()\fP returns the new region on success and \f5NULL\fP on failure.
.PP
.Ss "  int vmclose(Vmalloc_t* vm);"
This function closes the region \f5vm\fP and releases all associated memory
according to the region's memory discipline.
\f5vmclose()\fP returns \-1 on failure and a non-negative value otherwise.
.PP
.Ss "  int vmset(Vmalloc_t* vm, int flags, int type);"
This function sets or unsets control \f5flags\fP depending on \f5type != 0\fP or \f5type == 0\fP respectively.
The available flags are \f5VM_DBCHECK\fP and \f5VM_DBABORT\fP.
\f5vmset()\fP returns the previous set of flags along with
one of \f5VM_MTBEST\fP, \f5VM_MTDEBUG\fP, \f5VM_MTPOOL\fP, or \f5VM_MTLAST\fP.
.PP
.Ss "  void vmclrlock(int all);"
This function clears certain locks on regions.
If \f5all\fP is non-zero, all locks on all regions will be considered.
If \f5all\fP is zero, only locks by the current thread will be cleared.

Locks are used on certain internal data structures of a region 
to avoid conflicts due to concurrent allocation operations.
If a process or thread dies unexpectedly during an allocation operation
or if a \f5longjmp(3)\fP is performed at the wrong time, such locks will
be left in place. Future accesses to such locked data structures may
result in undefined behaviors. Function \f5vmclrlock()\fP makes
these data structures usable again. Note that some memory leakage
may be inevitable.

.PP
.Ss "ALLOCATION FUNCTIONS"
.PP
.Ss "  Void_t* vmalloc(Vmalloc_t* vm, size_t size);"
This function computes a block of at least the requested \f5size\fP
from the region \f5vm\fP. This block will be aligned to the \fIstrictest alignment\fP
suitable for storing any basic data type.
\f5vmalloc()\fP returns the computed block on success or \f5NULL\fP on failure.
.PP
.Ss "  Void_t* vmalign(Vmalloc_t* vm, size_t size, size_t align);"
This function works like \f5vmalloc()\fP but the computed block
will also be aligned by \f5align\fP, i.e., its address will be \f50%align\fP.
.PP
.Ss "  Void_t* vmresize(Vmalloc_t* vm, Void_t* addr, size_t size, int type);"
This function changes the size of the block pointed to by
\f5addr\fP to the new \f5size\fP.
If that cannot be done in place and \f5type\fP has
at least one of \f5VM_RSMOVE\fP and \f5VM_RSCOPY\fP,
a new block will be allocated and the old block is freed.
The bit \f5VM_RSCOPY\fP also causes the new block to be initialized with
as much of the old contents as will fit.
When a resized block gets larger and \f5type\fP has the bit \f5VM_RSZERO\fP.
the extended space will be cleared.
\f5vmresize()\fP returns a pointer to the new block, or \f5NULL\fP on failure.
.PP
.Ss "  int vmfree(Vmalloc_t* vm, Void_t* addr);"
This function frees the block pointed to by \f5addr\fP.
It returns \-1 on error, and nonnegative otherwise.
.PP
.Ss "SUPPORT FUNCTIONS"
.PP
.Ss "  Void_t* vmmaddress(size_t size);"
This function computes an address for attaching
or memory-mapping a shared memory segment with the given \f5size\fP.
The address is chosen to minimize collision with common memory regions
such as the process stack, the heap space (\f5sbrk(2)\fP)
or space used by dynamically linked libraries, etc.
.PP
.Ss "  Void_t* vmdata(Vmalloc_t* vm);"
Note that the memory used by the pointer \f5vm\fP representing a region is often
obtained from some process-local memory and may not be a part of the memory obtained
via the memory discipline used to open \f5vm\fP.
The pointer to the actual states of the region \f5vm\fP in memory obtained by the
memory discipline is \f5vm->data\fP. The macro function \f5vmdata\fP returns this pointer.
The importance of \f5vm->data\fP for an application that allocates memory shared across regions,
threads and processes or kept persistent in secondary storage is that it may need
may need to store this pointer to facilitate region reopening in different processes.
See also the events \f5VM_OPEN\fP and \f5VM_CLOSE\fP in the MEMORY DISCIPLINES section.
.PP
.Ss "  Void_t* vmuserdata(Vmalloc_t* vm, unsigned int key, ssize_t size);"
This function returns a pointer to a memory area of size at least \f5size\fP
that is uniquely associated with the given \f5key\fP.
Storing data by \f5key\fP is a useful way to maintain states
in shared and/or persistent memory (see \f5vmdcshare()\fP)
across concurrent processes or process instances.
.PP
.Ss "  Vmalloc_t* vmregion(Void_t* addr);"
If \f5addr\fP points to a memory block allocated from a region based on \f5Vmbest\fP,
this function returns that region. \f5vmregion()\fP first attempts to
certify the legitimacy of \f5addr\fP.
This certification will succeed if \f5addr\fP does indeed point to
a memory block allocated by some known region. However, if \f5addr\fP points
to some unknown memory, the certfication may or not succeed at telling so.
In that case, on success, \f5vmregion()\fP will return \f5NULL\fP.
However, on failure, the behavior of \f5vmregion()\fP is undefined.
.PP
.Ss "  int vmsegwalk(Vmalloc_t* vm, int(*walkf)vm, Void_t* seg, size_t size, disc));"
Each region consists of a sequence of raw memory segments obtained from the memory discipline.
This function walks all such segments in region \f5vm\fP or
all segments in all regions if \f5vm\fP is \f5NULL\fP.
The call \f5(*walkf)(vm, seg, size, disc)\fP is issued on each segment
with \f5vm\fP being the region, \f5seg\fP the segment,
\f5size\fP the segment size, and \f5disc\fP the memory discipline.
If \f5(*walkf)()\fP returns a negative value, the walk stops and returns the same value.
Otherwise, 0 is returned on success and -1 on failure.
.PP
.Ss "Void_t* vmsegfind(Vmalloc_t* vm, Void_t* addr);"
This function returns the pointer to the raw memory segment in region \f5vm\fP
that contains \f5addr\fP or \f5NULL\fP  if no such segment exists.
.PP
.Ss "  int vmstat(Vmalloc_t* vm, Vmstat_t* statb);"
This function gets statistics of region \f5vm\fP or
\f5Vmregion\fP if \f5vm\fP is \f5NULL\fP.
If \f5statb != NULL\fP, \f5vmstat()\fP computes statistics and returns 0.
Allocation operations should be avoided during this computation,
If \f5statb == NULL\fP,
\f5vmstat()\fP returns 1 if the region is locked and 0 otherwise.
Note that the method \f5Vmbest\fP uses multiple heaps for allocation
so the region itself is never locked.
.PP
A \f5Vmstat_t\fP structure has the members listed below:

.Cs
    size_t n_busy;    /* number of busy blocks         */
    size_t s_busy;    /* total amount of busy space    */
    size_t m_busy;    /* largest busy block            */
    size_t n_free;    /* number of free blocks         */
    size_t s_free;    /* total amount of free space    */
    size_t m_free;    /* largest free block            */
    size_t n_seg;     /* number of raw memory segments */
    size_t extent;    /* total size of all segments    */
    size_t n_heap;    /* number of heaps (Vmbest)      */
    char   mesg[];    /* textual summary of the stats  */
.Ce
.PP
.Ss "TRACING ALLOCATION CALLS"
.PP
A trace message is output for each successful allocation operation whenever
the trace file descriptor (see \f5vmtrace()\fP) is non-negative.
Each trace message is a text line with colon-separated fields:
.Cs
    old:new:size:vm:meth
.Ce
.Tp
\f5old\fP
This is zero for a newly allocated block or the address of the block being freed or resized.
.Tp
\f5new\fP
This is zero for a being freed block or the address of the allocated or resized block.
.Tp
\f5size\fP
This is the size of the new block if the event is allocation or resizing.
Otherwise, it is the size of the being freed block.
.Tp
\f5vm\fP
This is the address of the region issuing the message.
.Tp
\f5meth\fP
This is the allocation method:
\f5best\fP, \f5last\fP, \f5pool\fP, or \f5debug\fP.
.PP
.Ss "  int vmtrace(int fd);"
This function establishes \f5fd\fP as the file descriptor to write trace messages.
It returns the previous value of the trace file descriptor.
Since the default trace file descriptor is -1, \f5vmtrace()\fP must be called
at least once to establish a valid file descriptor to record trace messages.
.PP
.Ss "DEBUGGING MEMORY ERRORS"
.PP
The allocation method \f5Vmdebug\fP can be used to create a region
for debugging common memory violation problems such as
overwriting memory or freeing something more than once, etc.
Memory overwriting is detected by setting fences around each allocated block
of memory and checking to see if they are breached.
See also the section MALLOC COMPATIBILITY below for an extension of the Malloc
interface to detect memory errors.

When \f5Vmdebug\fP is used and an error is found, a warning message is output and,
if flag \f5VM_DBABORT\fP is on, the process is terminated by calling \f5abort\fP(2).
Each warning message is a line of self-explanatory fields separated by colons.
The optional flag \f5-DVMFL\fP, if used during compilation,
enables recording of file names and line numbers.
Note also that all warning messages are processed by an internal function \f5vmdbwarn()\fP.
So this is a good place to plant a debugger trap to debug memory errors.
.PP
.Ss "  int vmdebug(int fd);"
This function sets \f5fd\fP to be the file descriptor to write out warnings
and returns the previous file descriptor.
The default file descriptor is 2, i.e., the standard error.
.PP
.Ss "  int vmdbcheck(Vmalloc_t* vm);"
This function checks the integrity of \f5vm\fP if it uses \f5Vmdebug\fP or \f5Vmbest\fP.
If flag \f5VM_DBCHECK\fP is on and the allocation method is \f5Vmdebug\fP,
\f5vmdbcheck()\fP will be called on each allocation operation.
.PP
.Ss "  Void_t* vmdbwatch(Void_t* addr);"
If \f5addr\fP is not \f5NULL\fP, any allocation event that
involves the address \f5addr\fP will cause a warning message to be generated.
Watched addresses are kept on a small list in a first-in-first-out fashion.
If \f5addr\fP is \f5NULL\fP, the watch list will be cleared.
\f5vmdbwatch()\fP returns either the address of a block removed from the watch list
due to a new insertion or \f5NULL\fP.
.PP
.Ss "MALLOC COMPATIBILITY"
.PP
The Malloc family of functions are provided
so that any application based on them can use
Vmalloc without modification. These functions additionally provides separate modes
for run-time debugging and tracing of allocation events.
In such uses, if file names and line numbers in source code are desired,
the header \f5vmalloc.h\fP should be included and the code recompiled with \f5-DVMFL\fP.
The compatibility functions normally allocate memory
via the region \f5Vmregion\fP which is initially set to be \f5Vmheap\fP.
However, in debugging mode, this region will be directed to one properly instrumented.
In this way, normal operations remains fast and performance cost is incurred only when needed.

Allocation modes are defined via the environment variable \fIVMALLOC_OPTIONS\fP  which
is a space or comma-separated list of name[=value] options:
.Tp
\fImethod=meth\fP
\fImeth\fP can be either \f5best/Vmbest\fP or \f5debug/Vmdebug\fP.
In the former case, \f5Vmregion\fP will be set to \f5Vmheap\fP.
In the latter case, \f5Vmregion\fP will be set to a region based on \f5Vmdebug\fP.
.Tp
\fIperiod=n\fP
Change \f5Vmregion\fP to a region based on \f5Vmdebug\fP and
check for memory violations every \fIn\fP operations.
.Tp
\fIstart=n\fP
Change \f5Vmregion\fP to a region based on \f5Vmdebug\fP and
start checking memory violations after \fIn\fP allocation operations.
.Tp
\fIwarn=file\fP
Change \f5Vmregion\fP to a region based on \f5Vmdebug\fP and
send warnings to the file \f5file\fP.
.Tp
\fIwatch=addr\fP
Change \f5Vmregion\fP to a region based on \f5Vmdebug\fP
then watch and send warnings whenever address \fIaddr\fP is involved in an allocation operation.
.Tp
\fIabort\fP
Unless \fImethod=meth\fP was used to set \f5Vmregion\fP to \f5Vmheap\fP,
change \f5Vmregion\fP to a region based on \f5Vmdebug\fP.
Then, if \f5Vmregion\fP does point to a region based on \f5Vmdebug\fP,
enable \f5abort(2)\fP to be called on any allocation error.
.Tp
\fItrace=file\fP
Turn on tracing of allocation events and direct traces to the file \fIfile\fP.
.Tp
\fIcheck\fP
Enable (potentially expensive) integrity tests of internal data structures of
the allocation algorithm. This may be useful for debugging rare memory violation
errors not detectable by the method \f5Vmdebug\fP.
.PP
.Ss "  Void_t* malloc(size_t size);"
This function allocates a block of size \f5size\fP.
.PP
.Ss "  Void_t* realloc(Void_t* addr, size_t size);"
This function resizes block \f5addr\fP to have size \f5size\fP.
The block may be moved if needed.
.PP
.Ss "  Void_t* calloc(size_t n_obj, size_t s_obj);"
This function allocates \f5n_obj\fP objects, each of size \f5s_obj\fP.
The new memory will be cleared.
.PP
.Ss "  int cfree(Void_t* addr);"
.Ss "  int free(Void_t* addr);"
These functions free the block that \f5addr\fP points to.
.PP
.Ss "  int posix_memalign(Void_t** memptr, size_t align, size_t, size);"
This function allocates \f5size\fP bytes
and places the address of the allocated memory in \f5*memptr\fP.
The address of the allocated memory will be a multiple of \f5align\fP
which must be a power of two and a multiple of \f5sizeof(Void_t*)\fP.
\f5posix_memalign()\fP returns 0 on success, \f5EINVAL\fP if \f5align\fP
is invalid, and \f5ENOMEM\fP if there is no available memory.
.PP
.Ss "  Void_t* memalign(size_t align, size_t size);"
.Ss "  Void_* aligned_alloc(size_t align, size_t size);"
\f5memalign()\fP allocates memory of size \f5size\fP with address being \f50%align\fP.
\f5aligned_alloc()\fP is like \f5memalign()\fP but \f5size\fP is rounded to a multiple of \f5align\fP first.
.PP
.Ss "  Void_t* valloc(size_t size);"
.Ss "  Void_t* pvalloc(size_t size);"
\f5valloc()\fP allocates memory of size \f5size\fP with address \f50%\fP\fIpagesize\fP
where \fIpagesize\fP is the value defined by \f5getpagesize(2)\fP.
\f5pvalloc()\fP is like \f5valloc()\fP but \f5size\fP is rounded up to \fIpagesize\fP first.
.PP
.Ss "  Void_t* alloca(size_t size);"
This function is normally provided by the standard environment to allocate a block of
\f5size\fP bytes in the stack frame of the calling function. In that way, when the calling
function returns, the memory is released along with its stack frame.
\f5alloca()\fP is implemented in Vmalloc only if not provided by the standard environment.
It works by allocating a block of \f5size\fP bytes from \f5Vmregion\fP
that would be automatically freed some time after the calling function returns. 
.PP
.Ss "MISCELLANIES"
.PP
.Ss "Void_t* vmnewof(Vmalloc_t* vm, Void_t* addr, type, size_t n, size_t x);"
.Ss "Void_t* vmoldof(Vmalloc_t* vm, Void_t* addr, type, size_t n, size_t x);"
\f5vmnewof()\fP is a macro function that resizes block \f5addr\fP to the new size \f5n*sizeof(type)+x\fP.
Any additional space beyond old content will be set to zero and,
if the block is moved, old content will be copied as will fit.
\f5vmoldof()\fP is like \f5vmnewof()\fP but it neither copies old content nor clears space.
Both functions return the new block or \f5NULL\fP on failure.
.PP
.Ss "Void_t* vmgetmem(Vmalloc_t* vm, Void_t* addr, size_t size);"
This function provides a convenient way to create/close derived regions based on \f5Vmheap\fP
and/or allocate/free memory. Below are templates of how it may be used:
.Tp
\f5vmgetmem(0, x, y)\fP and \f5vmgetmem(vm, 0, 0)\fP
In the first case, arguments \f5x\fP and \f5y\fP are ignored and
a new derived region from \f5Vmheap\fP is created and returned (if successful, else \f5NULL\fP).
In the second case, \f5vm\fP is closed and \f5NULL\fP is returned.
.Tp
\f5vmgetmem(vm, addr, size)\fP
If \f5addr == NULL\fP, a block of size \f5size\fP is allocated and cleared to zero.
If \f5addr != NULL\fP and \f5size == 0\fP, block \f5addr\fP is freed.
If \f5addr != NULL\fP and \f5size > 0\fP,
block \f5addr\fP is resized to length \f5size\fP.
\f5addr\fP may be moved as needed and any additional space will be cleared to zero.
The return value will be \f5NULL\fP or a new or resized block.

.SH AUTHOR
Kiem-Phong Vo, kpv@research.att.com
