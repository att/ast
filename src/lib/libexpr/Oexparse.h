/* : : generated by a yacc that works -- solaris take note : : */
/* A Bison parser, made by GNU Bison 2.5.  */

/* Bison interface for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     MINTOKEN = 258,
     CHAR = 259,
     INT = 260,
     INTEGER = 261,
     UNSIGNED = 262,
     FLOATING = 263,
     STRING = 264,
     VOID = 265,
     STATIC = 266,
     ADDRESS = 267,
     BREAK = 268,
     CALL = 269,
     CASE = 270,
     CONSTANT = 271,
     CONTINUE = 272,
     DECLARE = 273,
     DEFAULT = 274,
     DYNAMIC = 275,
     ELSE = 276,
     EXIT = 277,
     FOR = 278,
     FUNCTION = 279,
     ITERATE = 280,
     ID = 281,
     IF = 282,
     LABEL = 283,
     MEMBER = 284,
     NAME = 285,
     POS = 286,
     PRAGMA = 287,
     PRE = 288,
     PRINTF = 289,
     PROCEDURE = 290,
     QUERY = 291,
     RETURN = 292,
     SCANF = 293,
     SPRINTF = 294,
     SSCANF = 295,
     SWITCH = 296,
     WHILE = 297,
     F2I = 298,
     F2S = 299,
     I2F = 300,
     I2S = 301,
     S2B = 302,
     S2F = 303,
     S2I = 304,
     F2X = 305,
     I2X = 306,
     S2X = 307,
     X2F = 308,
     X2I = 309,
     X2S = 310,
     OR = 311,
     AND = 312,
     NE = 313,
     EQ = 314,
     GE = 315,
     LE = 316,
     RS = 317,
     LS = 318,
     UNARY = 319,
     DEC = 320,
     INC = 321,
     CAST = 322,
     MAXTOKEN = 323
   };
#endif
/* Tokens.  */
#define MINTOKEN 258
#define CHAR 259
#define INT 260
#define INTEGER 261
#define UNSIGNED 262
#define FLOATING 263
#define STRING 264
#define VOID 265
#define STATIC 266
#define ADDRESS 267
#define BREAK 268
#define CALL 269
#define CASE 270
#define CONSTANT 271
#define CONTINUE 272
#define DECLARE 273
#define DEFAULT 274
#define DYNAMIC 275
#define ELSE 276
#define EXIT 277
#define FOR 278
#define FUNCTION 279
#define ITERATE 280
#define ID 281
#define IF 282
#define LABEL 283
#define MEMBER 284
#define NAME 285
#define POS 286
#define PRAGMA 287
#define PRE 288
#define PRINTF 289
#define PROCEDURE 290
#define QUERY 291
#define RETURN 292
#define SCANF 293
#define SPRINTF 294
#define SSCANF 295
#define SWITCH 296
#define WHILE 297
#define F2I 298
#define F2S 299
#define I2F 300
#define I2S 301
#define S2B 302
#define S2F 303
#define S2I 304
#define F2X 305
#define I2X 306
#define S2X 307
#define X2F 308
#define X2I 309
#define X2S 310
#define OR 311
#define AND 312
#define NE 313
#define EQ 314
#define GE 315
#define LE 316
#define RS 317
#define LS 318
#define UNARY 319
#define DEC 320
#define INC 321
#define CAST 322
#define MAXTOKEN 323




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 2068 of yacc.c  */
/* #line 17 "/home/gsf/src/lib/libexpr/exparse.y" */

	struct Exnode_s*expr;
	double		floating;
	struct Exref_s*	reference;
	struct Exid_s*	id;
	Sflong_t	integer;
	int		op;
	char*		string;
	struct Exbuf_s*	buffer;



/* Line 2068 of yacc.c  */
/* #line 199 "exparse.h" */
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

extern YYSTYPE exlval;


