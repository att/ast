# vim: set filetype=expect:
#
# Tests of `time` keyword/builtin.
set pid [spawn $ksh]
expect_prompt
# Terminal rows and columns may default to zero so ensure sane values.
send "stty rows 24 cols 80\r"
expect_prompt

set zero_sec_re "\[\t \]*0m0\.\[0-9\]\[0-9\]\[0-9\]s"
set one_sec_re "\[\t \]*0m1\.\[0-9\]\[0-9\]\[0-9\]s"

# ==========
log_test_entry
send "time\r"
expect -re "\r\nuser$zero_sec_re\r\nsys$zero_sec_re\r\n" {
    puts "time with no pipeline produces expected output"
}
expect_prompt

# ==========
# Ensure we get a useful `time` output. We don't want whatever is the default format. We do this
# after the previous test since both user and system mode CPU times should be close to zero at that
# point. That will not be true after this step so combining the two values is better.
send "TIMEFORMAT='\nreal %3lR\ncpu %3lC'\r"
expect_prompt

# ==========
# Timing a simple sleep command works.
log_test_entry
send "time sleep 1\r"
expect -re "\r\nreal\[\t \]*0m1\.\[01\]\[0-9\]\[0-9\]s\r\ncpu$zero_sec_re\r\n" {
    puts "time sleep 1 produces expected output"
}
expect_prompt

# ==========
# Timing a more complex pipeline works.
log_test_entry
send "time { sleep 0.05 | sleep 0.05; }\r"
expect -re "\r\nreal\[\t \]*0m0\.0\[0-9\]\[0-9\]s\r\ncpu$zero_sec_re\r\n" {
    puts "time sleep 0.05 pipeline produces expected output"
}
expect_prompt

# ==========
# Timing a CPU bound statement produces non-zero times.
log_test_entry
send "time { SECONDS=0; for ((i=0; ; i++)); do (( i % ITERS_PER_10MS == 0 && SECONDS >= 1.2 )) && break; done; }\r"
expect -re "\r\nreal\[\t \]*$one_sec_re\r\ncpu$one_sec_re\r\n" {
    puts "time CPU bound pipeline produces expected output"
}
expect_prompt

# ==========
# Does `TIMEFORMAT=%3P` work and produce reasonable output?
# Regression test; see https://github.com/att/ast/issues/1333.
# This also verifies that a single `%` at the end of the format is the same as `%%`. Note that the
# percentage will be close to 99% on most systems. But on a heavily loaded system or a virtual
# machine that may not be true. But even there we would normally expect at least 90%.
log_test_entry
send "$ksh -c 'TIMEFORMAT=\"pct %3P%\"; "
send "time { "
send "for ((i=0; ; i++)); do (( i % ITERS_PER_10MS == 0 && SECONDS >= 0.5 )) && break; done; "
send "}'\r"
expect -re "pct (100|9\[0-9\]).\[0-9\]\[0-9\]\[0-9\]%\r\n" {
    puts "time %3P produces correct output"
}
expect_prompt

# ==========
# Exit shell with ctrl-d
log_test_entry
send [ctrl D]
catch {expect default exp_continue} output
log_debug "EOF output: $output"

catch {wait}
exit 0
