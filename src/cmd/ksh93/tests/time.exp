# Tests of `time` keyword and `times` alias.
set pid [spawn $ksh]
expect_prompt

set zero_sec_re "\[\t \]*0m0\.\[0-9\]\[0-9\]\[0-9\]s"
set one_sec_re "\[\t \]*0m1\.\[0-9\]\[0-9\]\[0-9\]s"

# ==========
log_test_entry
send "time\r"
expect -re "\r\nuser$zero_sec_re\r\nsys$zero_sec_re\r\n" {
    puts "time with no pipeline produces expected output"
}
expect_prompt

# ==========
# Timing a simple sleep command works.
log_test_entry
send "time sleep 1\r"
expect -re "\r\nreal\[\t \]*0m1\.00\[0-9\]s\r\nuser$zero_sec_re\r\nsys$zero_sec_re\r\n" {
    puts "time sleep 1 produces expected output"
}
expect_prompt

# ==========
# Timing a more complex pipeline works.
log_test_entry
send "time { sleep 0.05 | sleep 0.05; }\r"
expect -re "\r\nreal\[\t \]*0m0\.0\[0-9\]\[0-9\]s\r\nuser$zero_sec_re\r\nsys$zero_sec_re\r\n" {
    puts "time sleep 0.05 pipeline produces expected output"
}
expect_prompt

# ==========
# The times command with no args produces reasonable output.
log_test_entry
send "times\r"
expect -re "\r\n$zero_sec_re $zero_sec_re\r\n$zero_sec_re $zero_sec_re\r\n" {
    puts "times produces expected output"
}
expect_prompt

# ==========
# The times command with args produces a syntax error.
log_test_entry
send "times sleep 1\r"
expect "times: unexpected arguments\r\nUsage: times" {
    puts "times sleep 1 produces syntax error"
}
expect_prompt

# ==========
# Timing a CPU bound statement produces non-zero times.
log_test_entry
send "time { SECONDS=0; while (( SECONDS < 1.5 )); do true; done; }\r"
expect -re "\r\nreal\[\t \]*$one_sec_re\r\nuser$one_sec_re\r\nsys$zero_sec_re\r\n" {
    puts "time CPU bound pipeline produces expected output"
}
expect_prompt

# ==========
# Verify `times` output accurately reflects CPU consumption by child processes.
#
# Start a CPU bound job in the background to force child user time to be non-zero. Note that we
# expect system mode times to be less than one but user mode time for the shell and child processes
# should be between one and two.
log_test_entry
send "$ksh -c 'SECONDS=0; while (( SECONDS < 1.5 )); do true; done'\r"
expect_prompt

send "times\r"
expect -re "\r\n$one_sec_re $zero_sec_re\r\n$one_sec_re $zero_sec_re\r\n" {
    puts "times produces expected non-zero output"
}
expect_prompt

# ==========
# Does `TIMEFORMAT=%3P` work and produce reasonable output?
# Regression test; see https://github.com/att/ast/issues/1333.
# This also verifies that a single `%` at the end of the format is the same as `%%`. Note that the
# percentage will be close to 99% on most systems. But on a heavily loaded system or a virtual
# machine that may not be true. But even there we would normally expect at least 90%.
log_test_entry
send "$ksh -c 'TIMEFORMAT=\"pct %3P%\"; "
send "SECONDS=0; time while (( SECONDS < 0.5 )); do true; done;'\r"
expect -re "pct 9\[0-9\].\[0-9\]\[0-9\]\[0-9\]%\r\n" {
    puts "time %3P produces correct output"
}
