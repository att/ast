# vim: set filetype=expect:
#
# Tests of `time` keyword and `times` alias.
set pid [spawn $ksh]
expect_prompt
# Terminal rows and columns may default to zero so ensure sane values.
send "stty rows 24 cols 80\r"
expect_prompt

set zero_sec_re "\[\t \]*0m0\.\[0-9\]\[0-9\]\[0-9\]s"
set one_sec_re "\[\t \]*0m1\.\[0-9\]\[0-9\]\[0-9\]s"

# ==========
# The times command with no args produces reasonable output.
log_test_entry
send "times\r"
expect -re "\r\n$zero_sec_re $zero_sec_re\r\n$zero_sec_re $zero_sec_re\r\n" {
    puts "times produces expected output"
}
expect_prompt

# ==========
# The times command with args produces a syntax error.
log_test_entry
send "times sleep 1\r"
expect "times: unexpected arguments\r\nUsage: times" {
    puts "times sleep 1 produces syntax error"
}
expect_prompt

# ==========
# A CPU bound statement produces non-zero times.
log_test_entry
send "for ((i=0; ; i++)); do (( i % ITERS_PER_10MS == 0 && SECONDS >= 1.2 )) && break; done\r"
expect_prompt

send "times\r"
expect -re "\r\n$one_sec_re $zero_sec_re\r\n$zero_sec_re $zero_sec_re\r\n" {
    puts "times produces expected non-zero output for shell"
}
expect_prompt

# ==========
# Verify `times` output accurately reflects CPU consumption by child processes.
#
# Start a CPU bound job in the background to force child user time to be non-zero. Note that we
# expect system mode times to be less than one but user mode time for the shell and child processes
# should be between one and two.
log_test_entry
send "$ksh -c 'for ((i=0; ; i++)); do (( i % ITERS_PER_10MS == 0 && SECONDS >= 1.2 )) && break; done'\r"
expect_prompt

send "times\r"
expect -re "\r\n$one_sec_re $zero_sec_re\r\n$one_sec_re $zero_sec_re\r\n" {
    puts "times produces expected non-zero output for child processes"
}
expect_prompt

# ==========
# Exit shell with ctrl-d
log_test_entry
send [ctrl D]
catch {expect default exp_continue} output
log_debug "EOF output: $output"

catch {wait}
exit 0
