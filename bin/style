#!/usr/bin/env fish
#
# Usage: bin/style [--all] [source_filename]...
#
# Run the source through `clang-format`. If invoked with `-all` then all the
# src/cmd/ksh93 source files will be linted. If invoked with one or more path names they
# will be linted. If the pathname is a directory all *.c files inside it will be linted.
# Otherwise any uncommitted source files are linted. If there is no uncommitted change
# then the files in the most recent commit are linted.
#
set all no
set git_clang_format no
set c_files
set files

# Deal with any CLI flags.
while set -q argv[1]
    if test "$argv[1]" = "--all"
        set all yes
        set -e argv[1]
    else
        break
    end
end

if test $all = yes
and set -q argv[1]
    echo "Unexpected arguments: '$argv'" >&2
    exit 1
end

if test $all = yes
    set files (git status --porcelain --short --untracked-files=all | sed -e 's/^ *[^ ]* *//')
    if set -q files[1]
        echo >&2
        echo You have uncommited changes. Cowardly refusing to restyle the entire code base. >&2
        echo >&2
        exit 1
    end
    set files src/cmd/ksh93/**.c
else if set -q argv[1]
    set files
    for f in $argv
        if test -f $argv
            set files $files $f
        else if test -d $argv
            set files $files {$argv}**.c {$argv}**.h
        end
    end
else
    # We haven't been asked to reformat all the source or specific files. If there are
    # uncommitted changes reformat those using `git clang-format`. Else reformat the
    # files in the most recent commit. Select (cached files) (modified but not cached,
    # and untracked files).
    set files (git diff-index --cached HEAD --name-only)
    set files $files (git ls-files --exclude-standard --others --modified)
    if set -q files[1]
        # Pending changes so restyle just the regions modified.
        set git_clang_format yes
    else
        # No pending changes so restyle the files in the most recent commit.
        set files (git diff-tree --no-commit-id --name-only -r HEAD)
    end
end

# Filter out non C source files.
set c_files
for file in (string match -r '^.*\.(?:c|h)$' -- $files)
    if test -f $file
        set c_files $c_files $file
    end
end

# Run the C reformatter if we have any C files.
if not set -q c_files[1]
    echo
    echo 'WARNING: No C files to restyle'
    echo
    exit 1
end

if test $git_clang_format = yes
    if type -q git-clang-format
        echo
        echo ========================================
        echo Running git-clang-format
        echo ========================================
        git add $c_files
        git-clang-format
    else
        echo
        echo 'WARNING: Cannot find git-clang-format command'
        echo
    end
else if type -q clang-format
    echo
    echo ========================================
    echo Running clang-format
    echo ========================================
    for file in $c_files
        cp $file $file.new # preserves mode bits
        clang-format $file >$file.new
        if cmp --quiet $file $file.new
            rm $file.new
        else
            echo $file was NOT correctly formatted
            mv $file.new $file
        end
    end
end
