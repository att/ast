// These are all the symbols defined by the legacy Nmake/iffe based build
// system I could identify. Some of them may no longer be relevant because we
// have pruned a lot of the code that is not relevant to building the `ksh`
// and related binaries and libraries. Nonetheless, those symbols are included
// here just in case we've overlooked something in the transition to the Meson
// build tool.
//
// I am explicitly including all such symbols to help us identify areas where we
// may be missing a platform feature test. Such symbols will show up as
// `#undef` comments after the Meson config step has been run to produce the
// `build/config_ast.h` header. There will be a lot of false positives until
// we have removed symbols that are known to no longer be relevant.
//
// TODO: At some point in the future (e.g., 2019-01-01) irrelevant items in
// the following list can be removed and the preceding paragraph removed.

// The following symbols are in lexical order within a given prefix; e.g.,
// `_lib_`. But the prefix groups are not in lexical order. The esoteric
// prefix groups are listed first. The standard prefix symbols (e.g., `_sys_`,
// `_hdr_`, etc.) based on tests like `cc.has_function()` or `cc.has_header()`
// are enumerated later.
#ifndef _CONFIG_AST_H
#define _CONFIG_AST_H 1

#define _GNU_SOURCE 1

// These are atypical platform symbols with respect to how they are
// determined. They are either hardcoded or not determined via the usual
// platform feature detection and naming conventions.
#mesondefine DEBUG_BUILD
#mesondefine MESON_BUILD
#mesondefine OSNAME
#mesondefine HOSTTYPE
#mesondefine BASH_MACHTYPE
#mesondefine STAT_ST_MTIM
#mesondefine STAT_ST_MTIMESPEC
#mesondefine CONF_LIBPATH
#mesondefine _PROC_PROG
#mesondefine _DARWIN_C_SOURCE
#mesondefine LIBICONV_PLUG

#mesondefine _ast_sizeof_int
#mesondefine _ast_sizeof_long
#mesondefine _ast_sizeof_off_t
#mesondefine _ast_sizeof_pointer
#mesondefine _ast_sizeof_size_t
#mesondefine _cmd_newgrp
#mesondefine _cmd_nfsd
#mesondefine _cmd_tput
#mesondefine _dll_DYNAMIC
#mesondefine _DLL_NEXT_PATH
#mesondefine _map_libc
#mesondefine _map_malloc
#mesondefine _map_spawnve
#mesondefine _may_use_threads
#mesondefine _more_long_int
#mesondefine _more_void_int
#mesondefine _wchar_t_is_int
#mesondefine _pth_ed
#mesondefine _pipe_rw
#mesondefine _proto_bcopy
#mesondefine _proto_bzero
#mesondefine _ptr_bits
#mesondefine _socketpair_shutdown_mode
#mesondefine _std_remove
#mesondefine _stk_down
#mesondefine isnanl
#mesondefine const_const_fts_open
#mesondefine MAX_SIGNUM
#mesondefine has_dev_fd
#mesondefine has_dev_stdout

// What follows are all the symbols that should be based on Meson feature
// tests like `cc.has_header()` and `cc.find_library()`.
#mesondefine _hdr_arpa_inet
#mesondefine _hdr_dl
#mesondefine _hdr_dlfcn
#mesondefine _hdr_dll
#mesondefine _hdr_execargs
#mesondefine _hdr_execinfo
#mesondefine _hdr_filio
#mesondefine _hdr_float
#mesondefine _hdr_fsg
#mesondefine _hdr_jioctl
#mesondefine _hdr_locale
#mesondefine _hdr_mach_o_dyld
#mesondefine _hdr_malloc
#mesondefine _hdr_math
#mesondefine _hdr_mman
#mesondefine _hdr_netdb
#mesondefine _hdr_netinet_in
#mesondefine _hdr_netinet_tcp
#mesondefine _hdr_nl_types
#mesondefine _hdr_paths
#mesondefine _hdr_rld_interface
#mesondefine _hdr_stat
#mesondefine _hdr_stddef
#mesondefine _hdr_stdlib
#mesondefine _hdr_sys_sysmacros
#mesondefine _hdr_termio
#mesondefine _hdr_termios
#mesondefine _hdr_unistd
#mesondefine _hdr_util
#mesondefine _hdr_utmp
#mesondefine _hdr_utmpx
#mesondefine _hdr_values

#mesondefine _lib___libc_malloc
#mesondefine _lib___malloc
#mesondefine _lib_alloca
#mesondefine _lib_clock_gettime
#mesondefine _lib_close64
#mesondefine _lib_confstr
#mesondefine _lib_creat64
#mesondefine _lib_dllload
#mesondefine _lib_dlopen
#mesondefine _lib_fdopendir
#mesondefine _lib_fsid
#mesondefine _lib_fstat64
#mesondefine _lib_fstatvfs64
#mesondefine _lib_fsync
#mesondefine _lib_ftruncate
#mesondefine _lib_ftruncate64
#mesondefine _lib_getdomainname
#mesondefine _lib_getexecname
#mesondefine _lib_getfsgid
#mesondefine _lib_getgrent
#mesondefine _lib_gethostid
#mesondefine _lib_gethostname
#mesondefine _lib_getsid
#mesondefine _lib_getsockname
#mesondefine _lib_getsockopt
#mesondefine _lib_gettimeofday
#mesondefine _lib_grantpt
#mesondefine _lib_htonl
#mesondefine _lib_htons
#mesondefine _lib_inet_ntoa
#mesondefine _lib_isfsg
#mesondefine _lib_iswalnum
#mesondefine _lib_iswprint
#mesondefine _lib_lchmod
#mesondefine _lib_lchown
#mesondefine _lib_loadbind
#mesondefine _lib_lseek64
#mesondefine _lib_lstat
#mesondefine _lib_lstat64
#mesondefine _lib_mallinfo
#mesondefine _lib_mallopt
#mesondefine _lib_memcntl
#mesondefine _lib_memdup
#mesondefine _lib_mmap64
#mesondefine _lib_mstats
#mesondefine _lib_munmap64
#mesondefine _lib_ntohl
#mesondefine _lib_ntohs
#mesondefine _lib_onexit
#mesondefine _lib_open64
#mesondefine _lib_opendir
#mesondefine _lib_pathnative
#mesondefine _lib_pathposix
#mesondefine _lib_pipe2
#mesondefine _lib_poll
#mesondefine _lib_poll_fd_2
#mesondefine _lib_poll_notimer
#mesondefine _lib_posix_openpt
#mesondefine _lib_posix_spawn
#mesondefine _lib_posix_spawnattr_setfchdir
#mesondefine _lib_posix_spawnattr_setsid
#mesondefine _lib_posix_spawnattr_setumask
#mesondefine _lib_pstat
#mesondefine _lib_ptsname
#mesondefine _lib_rewinddir
#mesondefine _lib_setlocale
#mesondefine _lib_setregid
#mesondefine _lib_setreuid
#mesondefine _lib_sigflag
#mesondefine _lib_sigprocmask
#mesondefine _lib_sigqueue
#mesondefine _lib_sigsetmask
#mesondefine _lib_socket
#mesondefine _lib_socketpair
#mesondefine _lib_spawn
#mesondefine _lib_spawn_mode
#mesondefine _lib_spawnve
#mesondefine _lib_spawnvex
#mesondefine _lib_statvfs
#mesondefine _lib_statvfs64
#mesondefine _lib_strlcat
#mesondefine _lib_sync
#mesondefine _lib_syncfs
#mesondefine _lib_sysinfo
#mesondefine _lib_tcgetattr
#mesondefine _lib_tcgetpgrp
#mesondefine _lib_towlower
#mesondefine _lib_towupper
#mesondefine _lib_truncate64
#mesondefine _lib_uname
#mesondefine _lib_universe
#mesondefine _lib_unlock
#mesondefine _lib_unlockpt
#mesondefine _lib_utime
#mesondefine _lib_utime_now
#mesondefine _lib_utimensat
#mesondefine _lib_wcrtomb
#mesondefine _lib_wcscmp
#mesondefine _lib_wcsxfrm
#mesondefine _lib_wcscpy
#mesondefine _lib_wctomb

#mesondefine _mem_arena_mallinfo
#mesondefine _mem_base_rel_utsname
#mesondefine _mem_bytes_total_mstats
#mesondefine _mem_c_line_termios
#mesondefine _mem_credit_sign_lconv
#mesondefine _mem_currency_symbol_lconv
#mesondefine _mem_d_fileno_dirent
#mesondefine _mem_d_ino_dirent
#mesondefine _mem_d_namlen_dirent
#mesondefine _mem_d_off_dirent
#mesondefine _mem_d_reclen_direct
#mesondefine _mem_d_reclen_dirent
#mesondefine _mem_d_type_dirent
#mesondefine _mem_debit_sign_lconv
#mesondefine _mem_decimal_point_lconv
#mesondefine _mem_e_xsize_eproc
#mesondefine _mem_f_basetype_statvfs
#mesondefine _mem_f_fsid_statvfs
#mesondefine _mem_f_fstr_statvfs
#mesondefine _mem_frac_digits_lconv
#mesondefine _mem_grouping_lconv
#mesondefine _mem_idnumber_utsname
#mesondefine _mem_int_curr_symbol_lconv
#mesondefine _mem_int_frac_digits_lconv
#mesondefine _mem_left_parenthesis_lconv
#mesondefine _mem_m_type_utsname
#mesondefine _mem_mmap_anon
#mesondefine _mem_mon_decimal_point_lconv
#mesondefine _mem_mon_grouping_lconv
#mesondefine _mem_mon_thousands_sep_lconv
#mesondefine _mem_msg_control_msghdr
#mesondefine _mem_n_cs_precedes_lconv
#mesondefine _mem_n_sep_by_space_lconv
#mesondefine _mem_n_sign_posn_lconv
#mesondefine _mem_negative_sign_lconv
#mesondefine _mem_nodeext_utsname
#mesondefine _mem_p_addr_extern_proc
#mesondefine _mem_p_cs_precedes_lconv
#mesondefine _mem_p_pid_extern_proc
#mesondefine _mem_p_sep_by_space_lconv
#mesondefine _mem_p_sign_posn_lconv
#mesondefine _mem_p_starttime_extern_proc
#mesondefine _mem_p_usrpri_extern_proc
#mesondefine _mem_p_wchan_extern_proc
#mesondefine _mem_pgroup_inheritance
#mesondefine _mem_pi_pri_procsinfo64
#mesondefine _mem_positive_sign_lconv
#mesondefine _mem_pr_clname_prpsinfo
#mesondefine _mem_pr_gid_prpsinfo
#mesondefine _mem_pr_lttydev_prpsinfo
#mesondefine _mem_pr_npid_prpsinfo
#mesondefine _mem_pr_ntpid_prpsinfo
#mesondefine _mem_pr_pgid_prpsinfo
#mesondefine _mem_pr_pgrp_prpsinfo
#mesondefine _mem_pr_psargs_prpsinfo
#mesondefine _mem_pr_refcount_prpsinfo
#mesondefine _mem_pr_rssize_prpsinfo
#mesondefine _mem_pr_sid_prpsinfo
#mesondefine _mem_pr_sonproc_prpsinfo
#mesondefine _mem_pr_tgrp_prpsinfo
#mesondefine _mem_right_parenthesis_lconv
#mesondefine _mem_thousands_sep_lconv
#mesondefine _mem_ut_host_utmp
#mesondefine _mem_ut_host_utmpx
#mesondefine _mem_ut_tv_utmp
#mesondefine _mem_ut_tv_utmpx
#mesondefine _mem_ut_type_utmp
#mesondefine _mem_ut_type_utmpx
#mesondefine _mem_ut_user_utmp
#mesondefine _mem_ut_user_utmpx

#mesondefine _sys_file
#mesondefine _sys_filio
#mesondefine _sys_fss
#mesondefine _sys_ioctl
#mesondefine _sys_jioctl
#mesondefine _sys_ldr
#mesondefine _sys_param
#mesondefine _sys_proc
#mesondefine _sys_pstat
#mesondefine _sys_ptem
#mesondefine _sys_select
#mesondefine _sys_socket
#mesondefine _sys_sockio
#mesondefine _sys_stream
#mesondefine _sys_uio
#mesondefine _sys_un
#mesondefine _sys_universe
#mesondefine _sys_utsname

#mesondefine _typ___va_list
#mesondefine _typ_ino64_t
#mesondefine _typ_long_double
#mesondefine _typ_mbstate_t
#mesondefine _typ_off64_t
#mesondefine _typ_struct_stat64

// These symbols are from src/lib/libast/include/ast_common.h that was
// generated on a Linux platform by the legacay IFFE mechanism. They may not
// be correct for other platforms.
//
// TODO: Convert these to proper feature tests.
#define _ast_LL 1  // LL numeric suffix supported
#define _ast_int8_t long
#define _ast_intmax_t _ast_int8_t
#mesondefine _ast_intmax_long
#define _ast_intswap 7
#define _ast_fltmax_t long double

#if DEBUG_BUILD
// If we're doing a debug build don't have any static (module private) functions.
// This is needed on most platforms for dladdr() to give us an accurate backtrace.
#define static_fn
#else
#define static_fn static
#endif

/// This is a macro that can be used to silence "unused parameter" warnings from the compiler for
/// functions which need to accept parameters they do not use because they need to be compatible
/// with an interface. It's similar to the Python idiom of doing `_ = param` at the top of a
/// function in the same situation.
///
/// Do not use this for `param` values that have side-effects when evaluated.
/// It should only be used for function parameters.
#define UNUSED(param)  \
    do {               \
        (void)(param);   \
    } while (0)

//
// We need to wrap the malloc family of functions. That's because the
// `job_waitsafe()` function is called from an interrupt context and
// indirectly calls `malloc()`. See issue #563.
//
#include <stdbool.h>

extern volatile bool vmbusy_flag;
#define vmbusy() vmbusy_flag

#if !NO_MALLOC_WRAPPERS
#include <sys/types.h>

extern void *ast_malloc(size_t size);
extern void *ast_calloc(size_t count, size_t size);
extern void *ast_realloc(void *ptr, size_t size);
extern void *ast_valloc(size_t size);
extern void ast_free(void *ptr);

#define malloc(s) ast_malloc(s)
#define calloc(c, s) ast_calloc(c, s)
#define realloc(p, s) ast_realloc(p, s)
#define valloc(s) ast_valloc(s)
#define free(p) ast_free(p)
#endif

// Some systems (e.g., macOS, OpenBSD) don't implement `eaccess()`. But all
// the systems we currently test on do provide `faccessat()` so use that. If
// and when we evern get built on a system without `faccessat()` we can
// implement build time feature test and implement a more complex workaround.
#include <fcntl.h>
#include <unistd.h>
#define eaccess(p, f) faccessat(AT_FDCWD, p, f, AT_EACCESS)

extern char *sh_getenv(const char *name);
#define getenv(x) sh_getenv(x)
#endif
